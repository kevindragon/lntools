["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.subs","~:imports",null,"~:requires",["^ ","~$re-frame.db","^9","~$re-frame.interop","^:","~$re-frame.loggers","^;","~$re-frame.utils","^<","~$re-frame.registrar","^="],"~:uses",["^ ","~$console","^;","~$app-db","^9","~$add-on-dispose!","^:","~$make-reaction","^:","~$get-handler","^=","~$first-in-vector","^<","~$deref?","^:","~$ratom?","^:","~$debug-enabled?","^:","~$clear-handlers","^=","~$register-handler","^="],"~:defs",["^ ","~$cache-and-return",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","~:line",33,"~:column",7,"~:end-line",33,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^T",[["~$query-v","~$dynv","~$r"]]]]],"~:doc","cache the reaction r"],"^5","~$re-frame.subs/cache-and-return","~:variadic",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",23,"~:method-params",["^T",[["^V","^W","~$r"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"^O",33,"^Q",33,"~:max-fixed-arity",3,"~:fn-var",true,"^S",["^T",["^U",["^T",[["^V","^W","~$r"]]]]],"^X","cache the reaction r"],"~$deref-input-signals",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",93,"^P",8,"^Q",93,"^R",27,"~:private",true,"^S",["^T",["^U",["^T",[["~$signals","~$query-id"]]]]]],"^15",true,"^5","~$re-frame.subs/deref-input-signals","^Z",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",27,"^[",["^T",[["^16","^17"]]],"^10",null,"^11",["^T",[null,null]],"^P",1,"^O",93,"^Q",93,"^12",2,"^13",true,"^S",["^T",["^U",["^T",[["^16","^17"]]]]]],"~$subscribe",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",53,"^P",7,"^Q",53,"^R",16,"^S",["^T",["^U",["^T",[["^V"],["~$v","^W"]]]]],"^X","Returns a Reagent/reaction which contains a computation","~:top-fn",["^ ","^Z",false,"^12",2,"^[",["^T",[["^V"],["~$v","^W"]]],"^S",["^T",[["^V"],["~$v","^W"]]],"^11",["^T",[null,null]]]],"^5","~$re-frame.subs/subscribe","^Z",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",16,"^1:",["^ ","^Z",false,"^12",2,"^[",["^T",[["^V"],["~$v","^W"]]],"^S",["^T",[["^V"],["~$v","^W"]]],"^11",["^T",[null,null]]],"^[",["^T",[["^V"],["~$v","^W"]]],"^10",null,"^11",["^T",[null,null]],"^P",1,"^O",53,"^Q",53,"^12",2,"^13",true,"^S",["^T",[["^V"],["~$v","^W"]]],"^X","Returns a Reagent/reaction which contains a computation"],"~$reg-sub",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",102,"^P",7,"^Q",102,"^R",14,"^S",["^T",["^U",["^T",[["^17","~$&","~$args"]]]]],"^X","Register a given handler function for a given query id.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation fucntion, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  ","^1:",["^ ","^Z",true,"^12",1,"^[",[["^T",["^17","^1="]]],"^S",["^T",[["^17","~$&","^1="]]],"^11",["^T",[null]]]],"^5","~$re-frame.subs/reg-sub","^Z",true,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",14,"^1:",["^ ","^Z",true,"^12",1,"^[",[["^T",["^17","^1="]]],"^S",["^T",[["^17","~$&","^1="]]],"^11",["^T",[null]]],"^[",[["^T",["^17","^1="]]],"^10",null,"^11",["^T",[null]],"^P",1,"^O",102,"^Q",102,"^12",1,"^13",true,"^S",["^T",[["^17","~$&","^1="]]],"^X","Register a given handler function for a given query id.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation fucntion, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  "],"~$query->reaction",["^ ","^5","~$re-frame.subs/query->reaction","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",25,"^P",1,"^Q",25,"^R",21,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",25,"^P",6,"^Q",25,"^R",21]],"~$register-raw",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",14,"^P",7,"^Q",14,"^R",19,"^S",["^T",["^U",["^T",[["^17","~$handler-fn"]]]]],"^X","Register a subscription handler fucntion for an query id"],"^5","~$re-frame.subs/register-raw","^Z",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",19,"^[",["^T",[["^17","^1B"]]],"^10",null,"^11",["^T",[null,null]],"^P",1,"^O",14,"^Q",14,"^12",2,"^13",true,"^S",["^T",["^U",["^T",[["^17","^1B"]]]]],"^X","Register a subscription handler fucntion for an query id"],"~$clear-all-handlers!",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",27,"^P",7,"^Q",27,"^R",26,"^S",["^T",["^U",["^T",[[]]]]],"^X","Unregisters all existing subscription handlers"],"^5","~$re-frame.subs/clear-all-handlers!","^Z",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",26,"^[",["^T",[[]]],"^10",null,"^11",["^T",[null,null]],"^P",1,"^O",27,"^Q",27,"^12",0,"^13",true,"^S",["^T",["^U",["^T",[[]]]]],"^X","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",44,"^P",7,"^Q",44,"^R",19,"^S",["^T",["^U",["^T",[["^V"],["^V","~$dyn-v"]]]]],"^1:",["^ ","^Z",false,"^12",2,"^[",["^T",[["^V"],["^V","^1G"]]],"^S",["^T",[["^V"],["^V","^1G"]]],"^11",["^T",[null,null]]]],"^5","~$re-frame.subs/cache-lookup","^Z",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",19,"^1:",["^ ","^Z",false,"^12",2,"^[",["^T",[["^V"],["^V","^1G"]]],"^S",["^T",[["^V"],["^V","^1G"]]],"^11",["^T",[null,null]]],"^[",["^T",[["^V"],["^V","^1G"]]],"^10",null,"^11",["^T",[null,null]],"^P",1,"^O",44,"^Q",44,"^12",2,"^13",true,"^S",["^T",[["^V"],["^V","^1G"]]]],"~$map-vals",["^ ","^L",null,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",86,"^P",8,"^Q",86,"^R",16,"^15",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^X","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^15",true,"^5","~$re-frame.subs/map-vals","^Z",false,"^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^R",16,"^[",["^T",[["~$f","~$m"]]],"^10",null,"^11",["^T",[null,null]],"^P",1,"^O",86,"^Q",86,"^12",2,"^13",true,"^S",["^T",["^U",["^T",[["~$f","~$m"]]]]],"^X","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^5","~$re-frame.subs/kind","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",11,"^P",1,"^Q",11,"^R",10,"^M",["^ ","^N","file:/C:/Users/jiangkx/.m2/repository/re-frame/re-frame/0.8.0/re-frame-0.8.0.jar!/re_frame/subs.cljc","^O",11,"^P",6,"^Q",11,"^R",10]]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else","~:sub","~:warn","~:error"]],"~:order",["^1Q","^1S","^1R","^1P"]],"^X",null]